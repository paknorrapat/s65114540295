services:
  web:
    build: .
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - default
      - traefik-public
    labels:
    - "traefik.enable=true"
    - "traefik.docker.network=traefik-public"

    # Main router (with strip prefix)
    - "traefik.http.routers.${PREFIX}-router.rule=PathPrefix(`/${PREFIX}`)"
    - "traefik.http.routers.${PREFIX}-router.entrypoints=web"
    - "traefik.http.routers.${PREFIX}-router.middlewares=${PREFIX}-stripprefix-middleware@docker"

    # Static files router (without strip prefix)
    - "traefik.http.routers.${PREFIX}-static-router.rule=PathPrefix(`/${PREFIX}/static`)"
    - "traefik.http.routers.${PREFIX}-static-router.entrypoints=web"
    - "traefik.http.routers.${PREFIX}-static-router.service=${PREFIX}-service@docker"

    # Middleware 
    - "traefik.http.middlewares.${PREFIX}-stripprefix-middleware.stripprefix.prefixes=/${PREFIX}"

    # Service
    - "traefik.http.services.${PREFIX}-service.loadbalancer.server.port=${EXPOSEPORT}"
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - default

volumes:
  postgres_data:
networks:
  default:
    driver: bridge
  traefik-public:
    external: true
